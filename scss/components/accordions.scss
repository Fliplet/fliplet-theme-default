@mixin accordion($options: (), $widgetInstanceId: '', $widgetInstanceUUID: '') {
  $configuration: map-merge((
    accordionWidth: $accordionWidth,
    accordionMinWidth: $accordionMinWidth,
    accordionMaxWidth: $accordionMaxWidth,
    accordionMarginTop: $accordionMarginTop,
    accordionMarginRight: $accordionMarginRight,
    accordionMarginBottom: $accordionMarginBottom,
    accordionMarginLeft: $accordionMarginLeft,
    accordionPaddingTop: $accordionPaddingTop,
    accordionPaddingRight: $accordionPaddingRight,
    accordionPaddingBottom: $accordionPaddingBottom,
    accordionPaddingLeft: $accordionPaddingLeft,
    accordionHeadingBg: $accordionHeadingBg,
    accordionHeadingBgActive: $accordionHeadingBgActive,
    accordionHeadingText: $accordionHeadingText,
    accordionHeadingTextActive: $accordionHeadingTextActive,
    accordionHeadingChevron: $accordionHeadingChevron,
    accordionHeadingChevronActive: $accordionHeadingChevronActive,
    accordionHeadingPaddingTop: $accordionHeadingPaddingTop,
    accordionHeadingPaddingRight: $accordionHeadingPaddingRight,
    accordionHeadingPaddingBottom: $accordionHeadingPaddingBottom,
    accordionHeadingPaddingLeft: $accordionHeadingPaddingLeft,
    accordionContentPaddingTop: $accordionContentPaddingTop,
    accordionContentPaddingRight: $accordionContentPaddingRight,
    accordionContentPaddingBottom: $accordionContentPaddingBottom,
    accordionContentPaddingLeft: $accordionContentPaddingLeft,
    accordionBorderWidth: $accordionBorderWidth,
    accordionBorderStyle: $accordionBorderStyle,
    accordionBorderColor: $accordionBorderColor,
    accordionWidthTablet: $accordionWidthTablet,
    accordionMinWidthTablet: $accordionMinWidthTablet,
    accordionMaxWidthTablet: $accordionMaxWidthTablet,
    accordionMarginTopTablet: $accordionMarginTopTablet,
    accordionMarginRightTablet: $accordionMarginRightTablet,
    accordionMarginBottomTablet: $accordionMarginBottomTablet,
    accordionMarginLeftTablet: $accordionMarginLeftTablet,
    accordionPaddingTopTablet: $accordionPaddingTopTablet,
    accordionPaddingRightTablet: $accordionPaddingRightTablet,
    accordionPaddingBottomTablet: $accordionPaddingBottomTablet,
    accordionPaddingLeftTablet: $accordionPaddingLeftTablet,
    accordionHeadingBgTablet: $accordionHeadingBgTablet,
    accordionHeadingBgActiveTablet: $accordionHeadingBgActiveTablet,
    accordionHeadingTextTablet: $accordionHeadingTextTablet,
    accordionHeadingTextActiveTablet: $accordionHeadingTextActiveTablet,
    accordionHeadingChevronTablet: $accordionHeadingChevronTablet,
    accordionHeadingChevronActiveTablet: $accordionHeadingChevronActiveTablet,
    accordionHeadingPaddingTopTablet: $accordionHeadingPaddingTopTablet,
    accordionHeadingPaddingRightTablet: $accordionHeadingPaddingRightTablet,
    accordionHeadingPaddingBottomTablet: $accordionHeadingPaddingBottomTablet,
    accordionHeadingPaddingLeftTablet: $accordionHeadingPaddingLeftTablet,
    accordionContentPaddingTopTablet: $accordionContentPaddingTopTablet,
    accordionContentPaddingRightTablet: $accordionContentPaddingRightTablet,
    accordionContentPaddingBottomTablet: $accordionContentPaddingBottomTablet,
    accordionContentPaddingLeftTablet: $accordionContentPaddingLeftTablet,
    accordionBorderWidthTablet: $accordionBorderWidthTablet,
    accordionBorderStyleTablet: $accordionBorderStyleTablet,
    accordionBorderColorTablet: $accordionBorderColorTablet,
    accordionWidthDesktop: $accordionWidthDesktop,
    accordionMinWidthDesktop: $accordionMinWidthDesktop,
    accordionMaxWidthDesktop: $accordionMaxWidthDesktop,
    accordionMarginTopDesktop: $accordionMarginTopDesktop,
    accordionMarginRightDesktop: $accordionMarginRightDesktop,
    accordionMarginBottomDesktop: $accordionMarginBottomDesktop,
    accordionMarginLeftDesktop: $accordionMarginLeftDesktop,
    accordionPaddingTopDesktop: $accordionPaddingTopDesktop,
    accordionPaddingRightDesktop: $accordionPaddingRightDesktop,
    accordionPaddingBottomDesktop: $accordionPaddingBottomDesktop,
    accordionPaddingLeftDesktop: $accordionPaddingLeftDesktop,
    accordionHeadingBgDesktop: $accordionHeadingBgDesktop,
    accordionHeadingBgActiveDesktop: $accordionHeadingBgActiveDesktop,
    accordionHeadingTextDesktop: $accordionHeadingTextDesktop,
    accordionHeadingTextActiveDesktop: $accordionHeadingTextActiveDesktop,
    accordionHeadingChevronDesktop: $accordionHeadingChevronDesktop,
    accordionHeadingChevronActiveDesktop: $accordionHeadingChevronActiveDesktop,
    accordionHeadingPaddingTopDesktop: $accordionHeadingPaddingTopDesktop,
    accordionHeadingPaddingRightDesktop: $accordionHeadingPaddingRightDesktop,
    accordionHeadingPaddingBottomDesktop: $accordionHeadingPaddingBottomDesktop,
    accordionHeadingPaddingLeftDesktop: $accordionHeadingPaddingLeftDesktop,
    accordionContentPaddingTopDesktop: $accordionContentPaddingTopDesktop,
    accordionContentPaddingRightDesktop: $accordionContentPaddingRightDesktop,
    accordionContentPaddingBottomDesktop: $accordionContentPaddingBottomDesktop,
    accordionContentPaddingLeftDesktop: $accordionContentPaddingLeftDesktop,
    accordionBorderWidthDesktop: $accordionBorderWidthDesktop,
    accordionBorderStyleDesktop: $accordionBorderStyleDesktop,
    accordionBorderColorDesktop: $accordionBorderColorDesktop,
    accordionContentBackgroundColor: $accordionContentBackgroundColor,
    accordionContentBackgroundColorTablet: $accordionContentBackgroundColorTablet,
    accordionContentBackgroundColorDesktop: $accordionContentBackgroundColorDesktop
  ), $options);

  $instanceSelector: '.panel';
  @if $widgetInstanceUUID != '' {
    $instanceSelector: '#{$instanceSelector}[data-collapse-uuid="#{$widgetInstanceUUID}"]';
  } @else if $widgetInstanceId != '' {
    $instanceSelector: '#{$instanceSelector}[data-collapse-id="#{$widgetInstanceId}"]';
  }

  $instanceWidgetStartSelector: '[data-widget-package="com.fliplet.accordionstart"]';
  @if $widgetInstanceUUID != '' {
    $instanceWidgetStartSelector: '#{$instanceWidgetStartSelector}[data-uuid="#{$widgetInstanceUUID}"]';
  } @else if $widgetInstanceId != '' {
    $instanceWidgetStartSelector: '#{$instanceWidgetStartSelector}[data-id="#{$widgetInstanceId}"]';
  }

  $instanceWidgetEndSelector: '[data-widget-package="com.fliplet.accordionend"]';
  @if $widgetInstanceUUID != '' {
    $instanceWidgetEndSelector: '#{$instanceWidgetEndSelector}[data-uuid="#{$widgetInstanceUUID}"]';
  } @else if $widgetInstanceId != '' {
    $instanceWidgetEndSelector: '#{$instanceWidgetEndSelector}[data-id="#{$widgetInstanceId}"]';
  }

  #{$instanceWidgetStartSelector},
  #{$instanceWidgetEndSelector} {
    width: map-get($configuration, accordionWidth);
    min-width: map-get($configuration, accordionMinWidth);
    max-width: map-get($configuration, accordionMaxWidth);

    @include above($tabletBreakpoint) {
      width: map-get($configuration, accordionWidthTablet);
      min-width: map-get($configuration, accordionMinWidthTablet);
      max-width: map-get($configuration, accordionMaxWidthTablet);
    }

    // Styles for desktop
    @include above($desktopBreakpoint) {
      width: map-get($configuration, accordionWidthDesktop);
      min-width: map-get($configuration, accordionMinWidthDesktop);
      max-width: map-get($configuration, accordionMaxWidthDesktop);
    }
  }

  #{$instanceSelector},
  #{$instanceWidgetStartSelector},
  #{$instanceWidgetEndSelector} {
    .collapse-start {
      color: map-get($configuration, accordionHeadingText);
      background-color: map-get($configuration, accordionHeadingBg);
      padding: map-get($configuration, accordionHeadingPaddingTop)
        calc(#{map-get($configuration, accordionHeadingPaddingRight)} + 29px)
        map-get($configuration, accordionHeadingPaddingBottom)
        map-get($configuration, accordionHeadingPaddingLeft);
      border: map-get($configuration, accordionBorderWidth)
        map-get($configuration, accordionBorderStyle)
        map-get($configuration, accordionBorderColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, accordionHeadingTextTablet);
        background-color: map-get($configuration, accordionHeadingBgTablet);
        padding: map-get($configuration, accordionHeadingPaddingTopTablet)
          calc(#{map-get($configuration, accordionHeadingPaddingRightTablet)} + 29px)
          map-get($configuration, accordionHeadingPaddingBottomTablet)
          map-get($configuration, accordionHeadingPaddingLeftTablet);
        border: map-get($configuration, accordionBorderWidthTablet)
          map-get($configuration, accordionBorderStyleTablet)
          map-get($configuration, accordionBorderColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, accordionHeadingTextDesktop);
        background-color: map-get($configuration, accordionHeadingBgDesktop);
        padding: map-get($configuration, accordionHeadingPaddingTopDesktop)
          calc(#{map-get($configuration, accordionHeadingPaddingRightDesktop)} + 29px)
          map-get($configuration, accordionHeadingPaddingBottomDesktop)
          map-get($configuration, accordionHeadingPaddingLeftDesktop);
        border: map-get($configuration, accordionBorderWidthDesktop)
          map-get($configuration, accordionBorderStyleDesktop)
          map-get($configuration, accordionBorderColorDesktop);
      }

      &:after {
        color: map-get($configuration, accordionHeadingChevron);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: map-get($configuration, accordionHeadingChevronTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: map-get($configuration, accordionHeadingChevronDesktop);
        }
      }
    }
  }

  .collapse-end {
    width: map-get($configuration, accordionWidth);
    min-width: map-get($configuration, accordionMinWidth);
    max-width: map-get($configuration, accordionMaxWidth);
    color: $bodyTextColor;
    background-color: $bodyBackground;

    border: map-get($configuration, accordionBorderWidth)
      map-get($configuration, accordionBorderStyle)
      map-get($configuration, accordionBorderColor);

    // Styles for tablet
    @include above($tabletBreakpoint) {
      width: map-get($configuration, accordionWidthTablet);
      min-width: map-get($configuration, accordionMinWidthTablet);
      max-width: map-get($configuration, accordionMaxWidthTablet);
      color: $bodyTextColorTablet;
      background-color: $bodyBackgroundTablet;

      border: map-get($configuration, accordionBorderWidthTablet)
        map-get($configuration, accordionBorderStyleTablet)
        map-get($configuration, accordionBorderColorTablet);
    }

    // Styles for desktop
    @include above($desktopBreakpoint) {
      width: map-get($configuration, accordionWidthDesktop);
      min-width: map-get($configuration, accordionMinWidthDesktop);
      max-width: map-get($configuration, accordionMaxWidthDesktop);
      color: $bodyTextColorDesktop;
      background-color: $bodyBackgroundDesktop;

      border: map-get($configuration, accordionBorderWidthDesktop)
        map-get($configuration, accordionBorderStyleDesktop)
        map-get($configuration, accordionBorderColorDesktop);
    }
  }

  .panel-group {
    width: map-get($configuration, accordionWidth);
    min-width: map-get($configuration, accordionMinWidth);
    max-width: map-get($configuration, accordionMaxWidth);

    // Styles for tablet
    @include above($tabletBreakpoint) {
      width: map-get($configuration, accordionWidthTablet);
      min-width: map-get($configuration, accordionMinWidthTablet);
      max-width: map-get($configuration, accordionMaxWidthTablet);
    }

    // Styles for desktop
    @include above($desktopBreakpoint) {
      width: map-get($configuration, accordionWidthDesktop);
      min-width: map-get($configuration, accordionMinWidthDesktop);
      max-width: map-get($configuration, accordionMaxWidthDesktop);
    }

    #{$instanceSelector} {
      margin: map-get($configuration, accordionMarginTop)
        map-get($configuration, accordionMarginRight)
        map-get($configuration, accordionMarginBottom)
        map-get($configuration, accordionMarginLeft);
      padding: map-get($configuration, accordionPaddingTop)
        map-get($configuration, accordionPaddingRight)
        map-get($configuration, accordionPaddingBottom)
        map-get($configuration, accordionPaddingLeft);
      background-color: transparent;
      border: map-get($configuration, accordionBorderWidth)
        map-get($configuration, accordionBorderStyle)
        map-get($configuration, accordionBorderColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        margin: map-get($configuration, accordionMarginTopTablet)
          map-get($configuration, accordionMarginRightTablet)
          map-get($configuration, accordionMarginBottomTablet)
          map-get($configuration, accordionMarginLeftTablet);
        padding: map-get($configuration, accordionPaddingTopTablet)
          map-get($configuration, accordionPaddingRightTablet)
          map-get($configuration, accordionPaddingBottomTablet)
          map-get($configuration, accordionPaddingLeftTablet);
        border: map-get($configuration, accordionBorderWidthTablet)
          map-get($configuration, accordionBorderStyleTablet)
          map-get($configuration, accordionBorderColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        margin: map-get($configuration, accordionMarginTopDesktop)
          map-get($configuration, accordionMarginRightDesktop)
          map-get($configuration, accordionMarginBottomDesktop)
          map-get($configuration, accordionMarginLeftDesktop);
        padding: map-get($configuration, accordionPaddingTopDesktop)
          map-get($configuration, accordionPaddingRightDesktop)
          map-get($configuration, accordionPaddingBottomDesktop)
          map-get($configuration, accordionPaddingLeftDesktop);
        border: map-get($configuration, accordionBorderWidthDesktop)
          map-get($configuration, accordionBorderStyleDesktop)
          map-get($configuration, accordionBorderColorDesktop);
      }

      > .panel-title {
        color: map-get($configuration, accordionHeadingTextActive);
        background-color: map-get($configuration, accordionHeadingBgActive);
        padding: map-get($configuration, accordionHeadingPaddingTop)
          calc(#{map-get($configuration, accordionHeadingPaddingRight)} + 29px)
          map-get($configuration, accordionHeadingPaddingBottom)
          map-get($configuration, accordionHeadingPaddingLeft);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: map-get($configuration, accordionHeadingTextActiveTablet);
          background-color: map-get($configuration, accordionHeadingBgActiveTablet);
          padding: map-get($configuration, accordionHeadingPaddingTopTablet)
            calc(#{map-get($configuration, accordionHeadingPaddingRightTablet)} + 29px)
            map-get($configuration, accordionHeadingPaddingBottomTablet)
            map-get($configuration, accordionHeadingPaddingLeftTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: map-get($configuration, accordionHeadingTextActiveDesktop);
          background-color: map-get($configuration, accordionHeadingBgActiveDesktop);
          padding: map-get($configuration, accordionHeadingPaddingTopDesktop)
            calc(#{map-get($configuration, accordionHeadingPaddingRightDesktop)} + 29px)
            map-get($configuration, accordionHeadingPaddingBottomDesktop)
            map-get($configuration, accordionHeadingPaddingLeftDesktop);
        }

        &.collapsed {
          color: map-get($configuration, accordionHeadingText);
          background-color: map-get($configuration, accordionHeadingBg);
          padding: map-get($configuration, accordionHeadingPaddingTop)
            calc(#{map-get($configuration, accordionHeadingPaddingRight)} + 29px)
            map-get($configuration, accordionHeadingPaddingBottom)
            map-get($configuration, accordionHeadingPaddingLeft);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            color: map-get($configuration, accordionHeadingTextTablet);
            background-color: map-get($configuration, accordionHeadingBgTablet);
            padding: map-get($configuration, accordionHeadingPaddingTopTablet)
              calc(#{map-get($configuration, accordionHeadingPaddingRightTablet)} + 29px)
              map-get($configuration, accordionHeadingPaddingBottomTablet)
              map-get($configuration, accordionHeadingPaddingLeftTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            color: map-get($configuration, accordionHeadingTextDesktop);
            background-color: map-get($configuration, accordionHeadingBgDesktop);
            padding: map-get($configuration, accordionHeadingPaddingTopDesktop)
              calc(#{map-get($configuration, accordionHeadingPaddingRightDesktop)} + 29px)
              map-get($configuration, accordionHeadingPaddingBottomDesktop)
              map-get($configuration, accordionHeadingPaddingLeftDesktop);
          }

          &:after {
            color: map-get($configuration, accordionHeadingChevron);

            // Styles for tablet
            @include above($tabletBreakpoint) {
              color: map-get($configuration, accordionHeadingChevronTablet);
            }

            // Styles for desktop
            @include above($desktopBreakpoint) {
              color: map-get($configuration, accordionHeadingChevronDesktop);
            }
          }
        }

        &:after {
          color: map-get($configuration, accordionHeadingChevronActive);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            color: map-get($configuration, accordionHeadingChevronActiveTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            color: map-get($configuration, accordionHeadingChevronActiveDesktop);
          }
        }
      }

      .panel-body {
        background-color: map-get($configuration, accordionContentBackgroundColor);
        padding: map-get($configuration, accordionContentPaddingTop)
          map-get($configuration, accordionContentPaddingRight)
          map-get($configuration, accordionContentPaddingBottom)
          map-get($configuration, accordionContentPaddingLeft);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: map-get($configuration, accordionContentBackgroundColorTablet);
          padding: map-get($configuration, accordionContentPaddingTopTablet)
            map-get($configuration, accordionContentPaddingRightTablet)
            map-get($configuration, accordionContentPaddingBottomTablet)
            map-get($configuration, accordionContentPaddingLeftTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: map-get($configuration, accordionContentBackgroundColorDesktop);
          padding: map-get($configuration, accordionContentPaddingTopDesktop)
            map-get($configuration, accordionContentPaddingRightDesktop)
            map-get($configuration, accordionContentPaddingBottomDesktop)
            map-get($configuration, accordionContentPaddingLeftDesktop);
        }
      }
    }
  }
}

@include accordion();
