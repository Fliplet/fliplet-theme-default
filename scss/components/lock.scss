@mixin lock($options: (), $widgetInstanceId: "", $widgetInstanceUUID: "") {
  $configuration: map-merge(
    (
      lockWidth: $lockWidth,
      lockMinWidth: $lockMinWidth,
      lockMaxWidth: $lockMaxWidth,
      lockPosition: $lockPosition,
      lockPositionTop: $lockPositionTop,
      lockPositionRight: $lockPositionRight,
      lockPositionBottom: $lockPositionBottom,
      lockPositionLeft: $lockPositionLeft,
      lockIndex: $lockIndex,
      lockDisplay: $lockDisplay,
      lockMarginTop: $lockMarginTop,
      lockMarginRight: $lockMarginRight,
      lockMarginBottom: $lockMarginBottom,
      lockMarginLeft: $lockMarginLeft,
      lockPaddingTop: $lockPaddingTop,
      lockPaddingRight: $lockPaddingRight,
      lockPaddingBottom: $lockPaddingBottom,
      lockPaddingLeft: $lockPaddingLeft,
      lockInput: $lockInput,
      lockInputFocus: $lockInputFocus,
      lockChevronColor: $lockChevronColor,
      touchIDBorder: $touchIDBorder,
      lockVisibility: $lockVisibility,
      lockWidthTablet: $lockWidthTablet,
      lockMinWidthTablet: $lockMinWidthTablet,
      lockMaxWidthTablet: $lockMaxWidthTablet,
      lockPositionTablet: $lockPositionTablet,
      lockPositionTopTablet: $lockPositionTopTablet,
      lockPositionRightTablet: $lockPositionRightTablet,
      lockPositionBottomTablet: $lockPositionBottomTablet,
      lockPositionLeftTablet: $lockPositionLeftTablet,
      lockIndexTablet: $lockIndexTablet,
      lockDisplayTablet: $lockDisplayTablet,
      lockMarginTopTablet: $lockMarginTopTablet,
      lockMarginRightTablet: $lockMarginRightTablet,
      lockMarginBottomTablet: $lockMarginBottomTablet,
      lockMarginLeftTablet: $lockMarginLeftTablet,
      lockPaddingTopTablet: $lockPaddingTopTablet,
      lockPaddingRightTablet: $lockPaddingRightTablet,
      lockPaddingBottomTablet: $lockPaddingBottomTablet,
      lockPaddingLeftTablet: $lockPaddingLeftTablet,
      lockInputTablet: $lockInputTablet,
      lockInputFocusTablet: $lockInputFocusTablet,
      lockChevronColorTablet: $lockChevronColorTablet,
      touchIDBorderTablet: $touchIDBorderTablet,
      lockVisibilityTablet: $lockVisibilityTablet,
      lockWidthDesktop: $lockWidthDesktop,
      lockMinWidthDesktop: $lockMinWidthDesktop,
      lockMaxWidthDesktop: $lockMaxWidthDesktop,
      lockPositionDesktop: $lockPositionDesktop,
      lockPositionTopDesktop: $lockPositionTopDesktop,
      lockPositionRightDesktop: $lockPositionRightDesktop,
      lockPositionBottomDesktop: $lockPositionBottomDesktop,
      lockPositionLeftDesktop: $lockPositionLeftDesktop,
      lockIndexDesktop: $lockIndexDesktop,
      lockDisplayDesktop: $lockDisplayDesktop,
      lockMarginTopDesktop: $lockMarginTopDesktop,
      lockMarginRightDesktop: $lockMarginRightDesktop,
      lockMarginBottomDesktop: $lockMarginBottomDesktop,
      lockMarginLeftDesktop: $lockMarginLeftDesktop,
      lockPaddingTopDesktop: $lockPaddingTopDesktop,
      lockPaddingRightDesktop: $lockPaddingRightDesktop,
      lockPaddingBottomDesktop: $lockPaddingBottomDesktop,
      lockPaddingLeftDesktop: $lockPaddingLeftDesktop,
      lockInputDesktop: $lockInputDesktop,
      lockInputFocusDesktop: $lockInputFocusDesktop,
      lockChevronColorDesktop: $lockChevronColorDesktop,
      touchIDBorderDesktop: $touchIDBorderDesktop,
      lockVisibilityDesktop: $lockVisibilityDesktop
    ),
    $options
  );

  $instanceSelector: '[data-widget-package="com.fliplet.lock"]';
  @if $widgetInstanceUUID != "" {
    $instanceSelector: '#{$instanceSelector}[data-uuid="#{$widgetInstanceUUID}"]';
  } @else if $widgetInstanceId != "" {
    $instanceSelector: '#{$instanceSelector}[data-id="#{$widgetInstanceId}"]';
  }

  #{$instanceSelector} {
    position: map-get($configuration, lockPosition) !important;
    z-index: map-get($configuration, lockIndex);

    @if map-get($configuration, lockPosition) == "relative" {
      @if map-get($configuration, lockVisibility) == "visible" {
        display: map-get($configuration, lockDisplay) !important;
      } @else {
        display: none !important;
      }
    } @else {
      @if map-get($configuration, lockVisibility) == "visible" {
        display: block !important;
      } @else {
        display: none !important;
      }

      top: map-get($configuration, lockPositionTop);
      right: map-get($configuration, lockPositionRight);
      bottom: map-get($configuration, lockPositionBottom);
      left: map-get($configuration, lockPositionLeft);
    }

    width: map-get($configuration, lockWidth);
    min-width: map-get($configuration, lockMinWidth);
    max-width: map-get($configuration, lockMaxWidth);
    margin: map-get($configuration, lockMarginTop) map-get($configuration, lockMarginRight)
      map-get($configuration, lockMarginBottom) map-get($configuration, lockMarginLeft);

    // Styles for tablet
    @include above($tabletBreakpoint) {
      position: map-get($configuration, lockPositionTablet) !important;
      z-index: map-get($configuration, lockIndexTablet);

      @if map-get($configuration, lockPositionTablet) == "relative" {
        @if map-get($configuration, lockVisibilityTablet) == "visible" {
          display: map-get($configuration, lockDisplayTablet) !important;
        } @else {
          display: none !important;
        }
      } @else {
        @if map-get($configuration, lockVisibilityTablet) == "visible" {
          display: block !important;
        } @else {
          display: none !important;
        }

        top: map-get($configuration, lockPositionTopTablet);
        right: map-get($configuration, lockPositionRightTablet);
        bottom: map-get($configuration, lockPositionBottomTablet);
        left: map-get($configuration, lockPositionLeftTablet);
      }

      width: map-get($configuration, lockWidthTablet);
      min-width: map-get($configuration, lockMinWidthTablet);
      max-width: map-get($configuration, lockMaxWidthTablet);
      margin: map-get($configuration, lockMarginTopTablet)
        map-get($configuration, lockMarginRightTablet)
        map-get($configuration, lockMarginBottomTablet)
        map-get($configuration, lockMarginLeftTablet);
    }

    // Styles for desktop
    @include above($desktopBreakpoint) {
      position: map-get($configuration, lockPositionDesktop) !important;
      z-index: map-get($configuration, lockIndexDesktop);

      @if map-get($configuration, lockPositionDesktop) == "relative" {
        @if map-get($configuration, lockVisibilityDesktop) == "visible" {
          display: map-get($configuration, lockDisplayDesktop) !important;
        } @else {
          display: none !important;
        }
      } @else {
        @if map-get($configuration, lockVisibilityDesktop) == "visible" {
          display: block !important;
        } @else {
          display: none !important;
        }

        top: map-get($configuration, lockPositionTopDesktop);
        right: map-get($configuration, lockPositionRightDesktop);
        bottom: map-get($configuration, lockPositionBottomDesktop);
        left: map-get($configuration, lockPositionLeftDesktop);
      }

      width: map-get($configuration, lockWidthDesktop);
      min-width: map-get($configuration, lockMinWidthDesktop);
      max-width: map-get($configuration, lockMaxWidthDesktop);
      margin: map-get($configuration, lockMarginTopDesktop)
        map-get($configuration, lockMarginRightDesktop)
        map-get($configuration, lockMarginBottomDesktop)
        map-get($configuration, lockMarginLeftDesktop);
    }

    .passcode-wrapper {
      padding: map-get($configuration, lockPaddingTop) map-get($configuration, lockPaddingRight)
        map-get($configuration, lockPaddingBottom) map-get($configuration, lockPaddingLeft);

      .passcode-field {
        border-bottom: 1px solid map-get($configuration, lockInput);

        &:focus {
          border-bottom: 1px solid map-get($configuration, lockInputFocus);
        }
      }

      // Styles for tablet
      @include above($tabletBreakpoint) {
        padding: map-get($configuration, lockPaddingTopTablet)
          map-get($configuration, lockPaddingRightTablet)
          map-get($configuration, lockPaddingBottomTablet)
          map-get($configuration, lockPaddingLeftTablet);

        .passcode-field {
          border-bottom: 1px solid map-get($configuration, lockInputTablet);

          &:focus {
            border-bottom: 1px solid map-get($configuration, lockInputFocusTablet);
          }
        }
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        padding: map-get($configuration, lockPaddingTopDesktop)
          map-get($configuration, lockPaddingRightDesktop)
          map-get($configuration, lockPaddingBottomDesktop)
          map-get($configuration, lockPaddingLeftDesktop);

        .passcode-field {
          border-bottom: 1px solid map-get($configuration, lockInputDesktop);

          &:focus {
            border-bottom: 1px solid map-get($configuration, lockInputFocusDesktop);
          }
        }
      }
    }

    .verify-field-wrapper .back-setup {
      color: map-get($configuration, lockChevronColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, lockChevronColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, lockChevronColorDesktop);
      }
    }

    .use-touchid {
      border: 1px solid map-get($configuration, touchIDBorder);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        border: 1px solid map-get($configuration, touchIDBorderTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        border: 1px solid map-get($configuration, touchIDBorderDesktop);
      }
    }
  }
}

@include lock();
