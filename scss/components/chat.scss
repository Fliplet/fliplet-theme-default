@mixin chat($options: (), $widgetInstanceId: "", $widgetInstanceUUID: "") {
  $configuration: map-merge(
    (
      chatConvListWidth: $chatConvListWidth,
      chatConvAreaWidth: $chatConvAreaWidth,
      chatBackgroundColor: $chatBackgroundColor,
      chatHeadingsColor: $chatHeadingsColor,
      chatTextColor: $chatTextColor,
      chatIconsAndLinksColor: $chatIconsAndLinksColor,
      chatButtonBackground: $chatButtonBackground,
      chatButtonTextColor: $chatButtonTextColor,
      chatOwnBubbleBackground: $chatOwnBubbleBackground,
      chatOwnBubbleTextColor: $chatOwnBubbleTextColor,
      chatOthersBubbleBackground: $chatOthersBubbleBackground,
      chatOthersBubbleTextColor: $chatOthersBubbleTextColor,
      chatContactCardBackground: $chatContactCardBackground,
      chatContactCardText: $chatContactCardText,
      chatContactCardBackgroundSelected: $chatContactCardBackgroundSelected,
      chatContactCardTextSelected: $chatContactCardTextSelected,
      chatSeparatorBackground: $chatSeparatorBackground,
      chatSeparatorTextColor: $chatSeparatorTextColor,
      chatConvListWidthTablet: $chatConvListWidthTablet,
      chatConvAreaWidthTablet: $chatConvAreaWidthTablet,
      chatBackgroundColorTablet: $chatBackgroundColorTablet,
      chatHeadingsColorTablet: $chatHeadingsColorTablet,
      chatTextColorTablet: $chatTextColorTablet,
      chatIconsAndLinksColorTablet: $chatIconsAndLinksColorTablet,
      chatButtonBackgroundTablet: $chatButtonBackgroundTablet,
      chatButtonTextColorTablet: $chatButtonTextColorTablet,
      chatOwnBubbleBackgroundTablet: $chatOwnBubbleBackgroundTablet,
      chatOwnBubbleTextColorTablet: $chatOwnBubbleTextColorTablet,
      chatOthersBubbleBackgroundTablet: $chatOthersBubbleBackgroundTablet,
      chatOthersBubbleTextColorTablet: $chatOthersBubbleTextColorTablet,
      chatContactCardBackgroundTablet: $chatContactCardBackgroundTablet,
      chatContactCardTextTablet: $chatContactCardTextTablet,
      chatContactCardBackgroundSelectedTablet: $chatContactCardBackgroundSelectedTablet,
      chatContactCardTextSelectedTablet: $chatContactCardTextSelectedTablet,
      chatSeparatorBackgroundTablet: $chatSeparatorBackgroundTablet,
      chatSeparatorTextColorTablet: $chatSeparatorTextColorTablet,
      chatConvListWidthDesktop: $chatConvListWidthDesktop,
      chatConvAreaWidthDesktop: $chatConvAreaWidthDesktop,
      chatBackgroundColorDesktop: $chatBackgroundColorDesktop,
      chatHeadingsColorDesktop: $chatHeadingsColorDesktop,
      chatTextColorDesktop: $chatTextColorDesktop,
      chatIconsAndLinksColorDesktop: $chatIconsAndLinksColorDesktop,
      chatButtonBackgroundDesktop: $chatButtonBackgroundDesktop,
      chatButtonTextColorDesktop: $chatButtonTextColorDesktop,
      chatOwnBubbleBackgroundDesktop: $chatOwnBubbleBackgroundDesktop,
      chatOwnBubbleTextColorDesktop: $chatOwnBubbleTextColorDesktop,
      chatOthersBubbleBackgroundDesktop: $chatOthersBubbleBackgroundDesktop,
      chatOthersBubbleTextColorDesktop: $chatOthersBubbleTextColorDesktop,
      chatContactCardBackgroundDesktop: $chatContactCardBackgroundDesktop,
      chatContactCardTextDesktop: $chatContactCardTextDesktop,
      chatContactCardBackgroundSelectedDesktop: $chatContactCardBackgroundSelectedDesktop,
      chatContactCardTextSelectedDesktop: $chatContactCardTextSelectedDesktop,
      chatSeparatorBackgroundDesktop: $chatSeparatorBackgroundDesktop,
      chatSeparatorTextColorDesktop: $chatSeparatorTextColorDesktop
    ),
    $options
  );

  $instanceSelector: '[data-widget-package="com.fliplet.chat"]';
  @if $widgetInstanceUUID != "" {
    $instanceSelector: '#{$instanceSelector}[data-uuid="#{$widgetInstanceUUID}"]';
  } @else if $widgetInstanceId != "" {
    $instanceSelector: '#{$instanceSelector}[data-id="#{$widgetInstanceId}"]';
  }

  #{$instanceSelector} {
    .chat-holder {
      background-color: map-get($configuration, chatBackgroundColor);
      color: map-get($configuration, chatTextColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, chatBackgroundColorTablet);
        color: map-get($configuration, chatTextColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, chatBackgroundColorDesktop);
        color: map-get($configuration, chatTextColorDesktop);
      }

      .top-header {
        background-color: map-get($configuration, chatBackgroundColor);
        color: map-get($configuration, chatTextColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: map-get($configuration, chatBackgroundColorTablet);
          color: map-get($configuration, chatTextColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: map-get($configuration, chatBackgroundColorDesktop);
          color: map-get($configuration, chatTextColorDesktop);
        }

        .header-title {
          color: map-get($configuration, chatHeadingsColor);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            color: map-get($configuration, chatHeadingsColorTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            color: map-get($configuration, chatHeadingsColorDesktop);
          }
        }
      }

      .offline-note,
      .message-copied-holder {
        background-color: rgba(map-get($configuration, chatTextColor), 0.5);
        color: rgba(map-get($configuration, chatBackgroundColor), 0.7);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: rgba(map-get($configuration, chatTextColorTablet), 0.5);
          color: rgba(map-get($configuration, chatBackgroundColorTablet), 0.7);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: rgba(map-get($configuration, chatTextColorDesktop), 0.5);
          color: rgba(map-get($configuration, chatBackgroundColorDesktop), 0.7);
        }
      }

      .loading-area,
      .error-area,
      .empty-area {
        color: rgba(map-get($configuration, chatTextColor), 0.7);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: rgba(map-get($configuration, chatTextColorTablet), 0.7);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: rgba(map-get($configuration, chatTextColorDesktop), 0.7);
        }
      }

      .error-area {
        .refresh-chat {
          border: 1px solid rgba(map-get($configuration, chatTextColor), 0.7);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            border: 1px solid rgba(map-get($configuration, chatTextColorTablet), 0.7);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            border: 1px solid rgba(map-get($configuration, chatTextColorDesktop), 0.7);
          }
        }
      }

      .chat-users-group span {
        color: rgba(map-get($configuration, chatTextColor), 0.5);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: rgba(map-get($configuration, chatTextColorTablet), 0.5);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: rgba(map-get($configuration, chatTextColorDesktop), 0.5);
        }
      }
    }

    .chat-user-info {
      .chat-participants-name {
        color: rgba(map-get($configuration, chatTextColor), 0.5);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: rgba(map-get($configuration, chatTextColorTablet), 0.5);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: rgba(map-get($configuration, chatTextColorDesktop), 0.5);
        }
      }
    }

    .participants-holder {
      .participants-helper {
        color: rgba(map-get($configuration, chatTextColor), 0.5);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: rgba(map-get($configuration, chatTextColorTablet), 0.5);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: rgba(map-get($configuration, chatTextColorDesktop), 0.5);
        }
      }
    }

    .chat-area {
      // Styles for tablet
      @include above($tabletBreakpoint) {
        width: map-get($configuration, chatConvAreaWidthTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        width: map-get($configuration, chatConvAreaWidthDesktop);
      }

      .chat-top-header {
        .chat-back .fa,
        .chat-user-info .profile-image-holder .fa,
        .chat-mute .fa {
          color: map-get($configuration, chatIconsAndLinksColor);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            color: map-get($configuration, chatIconsAndLinksColorTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            color: map-get($configuration, chatIconsAndLinksColorDesktop);
          }
        }
      }
    }

    .chat-area,
    .contacts-holder-overlay,
    .group-name-holder,
    .group-participants-holder,
    .chat-area .chat-top-header,
    .contacts-holder-overlay .contacts-top-header,
    .group-name-holder .group-top-header,
    .group-participants-holder .group-participants-top-header {
      background-color: map-get($configuration, chatBackgroundColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, chatBackgroundColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, chatBackgroundColorDesktop);
      }

      .contacts-info,
      .group-info {
        color: map-get($configuration, chatHeadingsColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: map-get($configuration, chatHeadingsColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: map-get($configuration, chatHeadingsColorDesktop);
        }
      }

      .contact-image-holder .contact-name-holder {
        color: map-get($configuration, chatHeadingsColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: map-get($configuration, chatHeadingsColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: map-get($configuration, chatHeadingsColorDesktop);
        }
      }
    }

    .chat-card-holder.unread:after {
      background-color: $highlightColor;
    }

    .chat-card {
      .profile-image-holder {
        background-color: rgba(map-get($configuration, chatIconsAndLinksColor), 0.1);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: rgba(map-get($configuration, chatIconsAndLinksColorTablet), 0.1);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: rgba(map-get($configuration, chatIconsAndLinksColorDesktop), 0.1);
        }

        .fa {
          color: map-get($configuration, chatIconsAndLinksColor);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            color: map-get($configuration, chatIconsAndLinksColorTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            color: map-get($configuration, chatIconsAndLinksColorDesktop);
          }
        }
      }

      &.contact-selected .profile-image-holder .fa {
        color: map-get($configuration, chatIconsAndLinksColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: map-get($configuration, chatIconsAndLinksColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: map-get($configuration, chatIconsAndLinksColorDesktop);
        }
      }
    }

    .contact-image-wrapper {
      .contact-profile-image {
        background-color: rgba(map-get($configuration, chatTextColor), 0.1);

        .fa {
          background-color: rgba(map-get($configuration, chatTextColor), 0.15);
        }

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: rgba(map-get($configuration, chatTextColorTablet), 0.1);

          .fa {
            background-color: rgba(map-get($configuration, chatTextColorTablet), 0.15);
          }
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: rgba(map-get($configuration, chatTextColorDesktop), 0.1);

          .fa {
            background-color: rgba(map-get($configuration, chatTextColorDesktop), 0.15);
          }
        }
      }

      .fa-times {
        background-color: map-get($configuration, chatButtonBackground);
        border: 1px solid map-get($configuration, chatButtonBackground);
        color: map-get($configuration, chatButtonTextColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: map-get($configuration, chatButtonBackgroundTablet);
          border: 1px solid map-get($configuration, chatButtonBackgroundTablet);
          color: map-get($configuration, chatButtonTextColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: map-get($configuration, chatButtonBackgroundDesktop);
          border: 1px solid map-get($configuration, chatButtonBackgroundDesktop);
          color: map-get($configuration, chatButtonTextColorDesktop);
        }
      }
    }

    .tab-group .tab > .control-label {
      border: 1px solid rgba(map-get($configuration, chatTextColor), 0.3);
      color: rgba(map-get($configuration, chatTextColor), 0.3);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        border: 1px solid rgba(map-get($configuration, chatTextColorTablet), 0.3);
        color: rgba(map-get($configuration, chatTextColorTablet), 0.3);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        border: 1px solid rgba(map-get($configuration, chatTextColorDesktop), 0.3);
        color: rgba(map-get($configuration, chatTextColorDesktop), 0.3);
      }
    }

    .tab-group .tab input:checked + .control-label,
    .tab-group .tab.active .control-label {
      border-color: map-get($configuration, chatOwnBubbleBackground);
      background: map-get($configuration, chatOwnBubbleBackground);
      color: map-get($configuration, chatOwnBubbleTextColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        border-color: map-get($configuration, chatOwnBubbleBackgroundTablet);
        background: map-get($configuration, chatOwnBubbleBackgroundTablet);
        color: map-get($configuration, chatOwnBubbleTextColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        border-color: map-get($configuration, chatOwnBubbleBackgroundDesktop);
        background: map-get($configuration, chatOwnBubbleBackgroundDesktop);
        color: map-get($configuration, chatOwnBubbleTextColorDesktop);
      }
    }

    .chat-card-holder,
    .contact-card {
      background-color: map-get($configuration, chatContactCardBackground);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, chatContactCardBackgroundTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, chatContactCardBackgroundDesktop);
      }

      &.contact-selected {
        background-color: map-get($configuration, chatContactCardBackgroundSelected);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: map-get($configuration, chatContactCardBackgroundSelectedTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: map-get($configuration, chatContactCardBackgroundSelectedDesktop);
        }

        .chat-info,
        .contact-info .contact-user-name,
        .chat-info .chat-user-preview {
          color: map-get($configuration, chatContactCardTextSelected);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            color: map-get($configuration, chatContactCardTextSelectedTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            color: map-get($configuration, chatContactCardTextSelectedDesktop);
          }
        }
      }

      .chat-info,
      .contact-info .contact-user-name,
      .chat-info .chat-user-preview {
        color: map-get($configuration, chatContactCardText);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: map-get($configuration, chatContactCardTextTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: map-get($configuration, chatContactCardTextDesktop);
        }
      }

      .fa {
        color: map-get($configuration, chatIconsAndLinksColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: map-get($configuration, chatIconsAndLinksColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: map-get($configuration, chatIconsAndLinksColorDesktop);
        }
      }

      .profile-image-holder {
        background-color: rgba(map-get($configuration, chatTextColor), 0.1);

        .fa {
          color: map-get($configuration, chatIconsAndLinksColor);
          background-color: transparent;
        }

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: rgba(map-get($configuration, chatTextColorTablet), 0.1);

          .fa {
            color: map-get($configuration, chatIconsAndLinksColorTablet);
          }
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: rgba(map-get($configuration, chatTextColorDesktop), 0.1);

          .fa {
            color: map-get($configuration, chatIconsAndLinksColorDesktop);
          }
        }
      }
    }

    .chat-card-holder .icon:hover,
    .contact-card .icon:hover {
      background-color: rgba(map-get($configuration, chatTextColor), 0.2);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: rgba(map-get($configuration, chatTextColorTablet), 0.2);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: rgba(map-get($configuration, chatTextColorDesktop), 0.2);
      }
    }

    .chat-controls .start-new,
    .contacts-holder-overlay .contacts-back {
      color: map-get($configuration, chatIconsAndLinksColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        color: map-get($configuration, chatIconsAndLinksColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        color: map-get($configuration, chatIconsAndLinksColorDesktop);
      }
    }

    .contacts-done-holder .contacts-done,
    .contacts-done-holder .contacts-create {
      background-color: transparent;
      border: 1px solid map-get($configuration, chatButtonBackground);
      color: map-get($configuration, chatButtonBackground);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, chatButtonBackgroundTablet);
        border: 1px solid map-get($configuration, chatButtonBackgroundTablet);
        color: map-get($configuration, chatButtonTextColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, chatButtonBackgroundDesktop);
        border: 1px solid map-get($configuration, chatButtonBackgroundDesktop);
        color: map-get($configuration, chatButtonTextColorDesktop);
      }
    }

    .contacts-top-header.ready .contacts-done-holder .contacts-done,
    .group-top-header.ready .contacts-done-holder .contacts-create {
      background-color: map-get($configuration, chatButtonBackground);
      border: 1px solid map-get($configuration, chatButtonBackground);
      color: map-get($configuration, chatButtonTextColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, chatButtonBackgroundTablet);
        border: 1px solid map-get($configuration, chatButtonBackgroundTablet);
        color: map-get($configuration, chatButtonTextColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, chatButtonBackgroundDesktop);
        border: 1px solid map-get($configuration, chatButtonBackgroundDesktop);
        color: map-get($configuration, chatButtonTextColorDesktop);
      }
    }

    .contact-image-wrapper {
      .fa-user {
        color: map-get($configuration, chatIconsAndLinksColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: map-get($configuration, chatIconsAndLinksColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: map-get($configuration, chatIconsAndLinksColorDesktop);
        }
      }

      .fa-times {
        background-color: map-get($configuration, chatButtonBackground);
        color: map-get($configuration, chatButtonTextColor);
        border: 2px solid map-get($configuration, chatBackgroundColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: map-get($configuration, chatButtonBackgroundTablet);
          color: map-get($configuration, chatButtonTextColorTablet);
          border: 2px solid map-get($configuration, chatBackgroundColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: map-get($configuration, chatButtonBackgroundDesktop);
          color: map-get($configuration, chatButtonTextColorDesktop);
          border: 2px solid map-get($configuration, chatBackgroundColorDesktop);
        }
      }
    }

    .all-users-holder .seperator {
      background-color: map-get($configuration, chatSeparatorBackground);
      color: map-get($configuration, chatSeparatorTextColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, chatSeparatorBackgroundTablet);
        color: map-get($configuration, chatSeparatorTextColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, chatSeparatorBackgroundDesktop);
        color: map-get($configuration, chatSeparatorTextColorDesktop);
      }
    }

    .participants-bar {
      background-color: lighten(map-get($configuration, chatTextColor), 75%);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: lighten(map-get($configuration, chatTextColorTablet), 75%);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: lighten(map-get($configuration, chatTextColorDesktop), 75%);
      }
    }

    .group-name-field-holder {
      .group-name-field {
        border: 1px solid lighten(map-get($configuration, chatTextColor), 60%);
        background-color: map-get($configuration, chatBackgroundColor);
        color: map-get($configuration, chatTextColor);

        &:focus {
          border: 1px solid $highlightColor;
        }

        // Styles for tablet
        @include above($tabletBreakpoint) {
          border: 1px solid lighten(map-get($configuration, chatTextColorTablet), 60%);
          background-color: map-get($configuration, chatBackgroundColorTablet);
          color: map-get($configuration, chatTextColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          border: 1px solid lighten(map-get($configuration, chatTextColorDesktop), 60%);
          background-color: map-get($configuration, chatBackgroundColorDesktop);
          color: map-get($configuration, chatTextColorDesktop);
        }
      }
    }

    .chat {
      &.chat-right {
        .chat-body {
          background-color: map-get($configuration, chatOwnBubbleBackground);
          border: 1px solid transparent;
          color: map-get($configuration, chatOwnBubbleTextColor);

          &:after {
            border-color: transparent transparent transparent
              map-get($configuration, chatOwnBubbleBackground);
          }

          // Styles for tablet
          @include above($tabletBreakpoint) {
            background-color: map-get($configuration, chatOwnBubbleBackgroundTablet);
            color: map-get($configuration, chatOwnBubbleTextColorTablet);

            &:after {
              border-color: transparent transparent transparent
                map-get($configuration, chatOwnBubbleBackgroundTablet);
            }
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            background-color: map-get($configuration, chatOwnBubbleBackgroundDesktop);
            color: map-get($configuration, chatOwnBubbleTextColorDesktop);

            &:after {
              border-color: transparent transparent transparent
                map-get($configuration, chatOwnBubbleBackgroundDesktop);
            }
          }
        }
      }

      &.chat-left {
        .chat-body {
          background-color: map-get($configuration, chatOthersBubbleBackground);
          border: 1px solid transparent;
          color: map-get($configuration, chatOthersBubbleTextColor);

          &:after {
            border-color: transparent map-get($configuration, chatOthersBubbleBackground)
              transparent transparent;
          }

          // Styles for tablet
          @include above($tabletBreakpoint) {
            background-color: map-get($configuration, chatOthersBubbleBackgroundTablet);
            color: map-get($configuration, chatOthersBubbleTextColorTablet);

            &:after {
              border-color: transparent transparent transparent
                map-get($configuration, chatOthersBubbleBackgroundTablet);
            }
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            background-color: map-get($configuration, chatOthersBubbleBackgroundDesktop);
            color: map-get($configuration, chatOthersBubbleTextColorDesktop);

            &:after {
              border-color: transparent transparent transparent
                map-get($configuration, chatOthersBubbleBackgroundDesktop);
            }
          }
        }
      }

      &.tapped {
        &.chat-right {
          .chat-body {
            background-color: darken(map-get($configuration, chatOwnBubbleBackground), 10%);

            &:after {
              border-color: transparent transparent transparent
                darken(map-get($configuration, chatOwnBubbleBackground), 10%);
            }

            // Styles for tablet
            @include above($tabletBreakpoint) {
              background-color: darken(map-get($configuration, chatOwnBubbleBackgroundTablet), 10%);

              &:after {
                border-color: transparent transparent transparent
                  darken(map-get($configuration, chatOwnBubbleBackgroundTablet), 10%);
              }
            }

            // Styles for desktop
            @include above($desktopBreakpoint) {
              background-color: darken(
                map-get($configuration, chatOwnBubbleBackgroundDesktop),
                10%
              );

              &:after {
                border-color: transparent transparent transparent
                  darken(map-get($configuration, chatOwnBubbleBackgroundDesktop), 10%);
              }
            }
          }
        }

        &.chat-left {
          .chat-body {
            background-color: darken(map-get($configuration, chatOthersBubbleBackground), 10%);

            &:after {
              border-color: transparent transparent transparent
                darken(map-get($configuration, chatOthersBubbleBackground), 10%);
            }

            // Styles for tablet
            @include above($tabletBreakpoint) {
              background-color: darken(
                map-get($configuration, chatOthersBubbleBackgroundTablet),
                10%
              );

              &:after {
                border-color: transparent transparent transparent
                  darken(map-get($configuration, chatOthersBubbleBackgroundTablet), 10%);
              }
            }

            // Styles for desktop
            @include above($desktopBreakpoint) {
              background-color: darken(
                map-get($configuration, chatOthersBubbleBackgroundDesktop),
                10%
              );

              &:after {
                border-color: transparent transparent transparent
                  darken(map-get($configuration, chatOthersBubbleBackgroundDesktop), 10%);
              }
            }
          }
        }
      }

      &.editing {
        &.chat-right,
        &.chat-left {
          .chat-body {
            background-color: #fff2be;
            color: map-get($configuration, chatTextColor);

            &:after {
              border-color: transparent transparent transparent #fff2be;
            }

            // Styles for tablet
            @include above($tabletBreakpoint) {
              color: map-get($configuration, chatTextColorTablet);
            }

            // Styles for desktop
            @include above($desktopBreakpoint) {
              color: map-get($configuration, chatTextColorDesktop);
            }
          }
        }
      }
    }

    .contacts-holder-overlay,
    .group-name-holder,
    .group-participants-holder,
    .chat-holder .chat-list,
    .loading-area,
    .error-area,
    .empty-area {
      border-color: rgba(map-get($configuration, chatTextColor), 0.3);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        border-color: rgba(map-get($configuration, chatTextColorTablet), 0.3);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        border-color: rgba(map-get($configuration, chatTextColorDesktop), 0.3);
      }
    }

    .chat-holder .chat-list {
      // Styles for tablet
      @include above($tabletBreakpoint) {
        width: map-get($configuration, chatConvListWidthTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        width: map-get($configuration, chatConvListWidthDesktop);
      }
    }

    .chat-input-controls {
      background-color: map-get($configuration, chatBackgroundColor);
      border-top: 1px solid rgba(map-get($configuration, chatTextColor), 0.3);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, chatBackgroundColorTablet);
        border-top: 1px solid rgba(map-get($configuration, chatTextColorTablet), 0.3);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, chatBackgroundColorDesktop);
        border-top: 1px solid rgba(map-get($configuration, chatTextColorDesktop), 0.3);
      }

      .input-second-row {
        .image-button {
          .fa {
            color: map-get($configuration, chatIconsAndLinksColor);

            // Styles for tablet
            @include above($tabletBreakpoint) {
              color: map-get($configuration, chatIconsAndLinksColorTablet);
            }

            // Styles for desktop
            @include above($desktopBreakpoint) {
              color: map-get($configuration, chatIconsAndLinksColorDesktop);
            }
          }
        }

        .send-button,
        .send-save-button {
          color: map-get($configuration, chatButtonBackground);
          border: 1px solid map-get($configuration, chatButtonBackground);

          // Styles for tablet
          @include above($tabletBreakpoint) {
            color: map-get($configuration, chatButtonBackgroundTablet);
            border: 1px solid map-get($configuration, chatButtonBackgroundTablet);
          }

          // Styles for desktop
          @include above($desktopBreakpoint) {
            color: map-get($configuration, chatButtonBackgroundDesktop);
            border: 1px solid map-get($configuration, chatButtonBackgroundDesktop);
          }
        }
      }

      &.ready {
        .input-second-row {
          .send-button,
          .send-save-button {
            background-color: map-get($configuration, chatButtonBackground);
            color: map-get($configuration, chatBackgroundColor);
            border: 1px solid map-get($configuration, chatButtonBackground);

            // Styles for tablet
            @include above($tabletBreakpoint) {
              background-color: map-get($configuration, chatOwnBubbleBackgroundTablet);
              color: map-get($configuration, chatBackgroundColorTablet);
              border: 1px solid map-get($configuration, chatButtonBackgroundTablet);
            }

            // Styles for desktop
            @include above($desktopBreakpoint) {
              background-color: map-get($configuration, chatButtonBackgroundDesktop);
              color: map-get($configuration, chatBackgroundColorDesktop);
              border: 1px solid map-get($configuration, chatButtonBackgroundDesktop);
            }
          }
        }
      }

      .image-preview-holder {
        background-color: rgba(map-get($configuration, chatBackgroundColor), 0.95);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: rgba(map-get($configuration, chatBackgroundColorTablet), 0.95);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: rgba(map-get($configuration, chatBackgroundColorDesktop), 0.95);
        }
      }
    }

    .section-label-wrapper {
      .search-holder .fa {
        color: map-get($configuration, chatIconsAndLinksColor);

        // Styles for tablet
        @include above($tabletBreakpoint) {
          color: map-get($configuration, chatIconsAndLinksColorTablet);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          color: map-get($configuration, chatIconsAndLinksColorDesktop);
        }
      }

      .search-holder .form-control {
        background-color: map-get($configuration, chatBackgroundColor);
        color: map-get($configuration, chatTextColor);
        border: 1px solid rgba(map-get($configuration, chatTextColor), 0.3);

        &:focus {
          border: 1px solid $highlightColor;
        }

        // Styles for tablet
        @include above($tabletBreakpoint) {
          background-color: map-get($configuration, chatBackgroundColorTablet);
          color: map-get($configuration, chatTextColorTablet);
          border: 1px solid rgba(map-get($configuration, chatTextColorTablet), 0.3);
        }

        // Styles for desktop
        @include above($desktopBreakpoint) {
          background-color: map-get($configuration, chatBackgroundColorDesktop);
          color: map-get($configuration, chatTextColorDesktop);
          border: 1px solid rgba(map-get($configuration, chatTextColorDesktop), 0.3);
        }
      }
    }

    .input-first-row textarea {
      background-color: map-get($configuration, chatBackgroundColor);
      color: map-get($configuration, chatTextColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, chatBackgroundColorTablet);
        color: map-get($configuration, chatTextColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, chatBackgroundColorDesktop);
        color: map-get($configuration, chatTextColorDesktop);
      }
    }

    .all-users-holder .seperator {
      background-color: map-get($configuration, chatSeparatorBackground);
      color: map-get($configuration, chatSeparatorTextColor);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: map-get($configuration, chatSeparatorBackgroundTablet);
        color: map-get($configuration, chatSeparatorTextColorTablet);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: map-get($configuration, chatSeparatorBackgroundDesktop);
        color: map-get($configuration, chatSeparatorTextColorDesktop);
      }
    }

    .participants-bar {
      background-color: rgba(map-get($configuration, chatTextColor), 0.2);

      // Styles for tablet
      @include above($tabletBreakpoint) {
        background-color: rgba(map-get($configuration, chatTextColorTablet), 0.2);
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        background-color: rgba(map-get($configuration, chatTextColorDesktop), 0.2);
      }
    }

    .show-more-contacts .btn {
      border: 1px solid $highlightColor;
      color: $highlightColor;
    }
  }
}

@include chat();
